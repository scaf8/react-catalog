{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { forwardRef, useContext, useImperativeHandle } from 'react';\nimport CalendarOutlined from \"@ant-design/icons/es/icons/CalendarOutlined\";\nimport ClockCircleOutlined from \"@ant-design/icons/es/icons/ClockCircleOutlined\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport SwapRightOutlined from \"@ant-design/icons/es/icons/SwapRightOutlined\";\nimport classNames from 'classnames';\nimport { RangePicker as RCRangePicker } from 'rc-picker';\nimport { getMergedStatus, getStatusClassNames } from '../../_util/statusUtils';\nimport { devUseWarning } from '../../_util/warning';\nimport { ConfigContext } from '../../config-provider';\nimport DisabledContext from '../../config-provider/DisabledContext';\nimport useSize from '../../config-provider/hooks/useSize';\nimport { FormItemInputContext } from '../../form/context';\nimport { useLocale } from '../../locale';\nimport { useCompactItemContext } from '../../space/Compact';\nimport enUS from '../locale/en_US';\nimport useStyle from '../style';\nimport { getRangePlaceholder, getTimeProps, mergeAllowClear, transPlacement2DropdownAlign } from '../util';\nimport Components from './Components';\nimport { useZIndex } from '../../_util/hooks/useZIndex';\nimport useCSSVarCls from '../../config-provider/hooks/useCSSVarCls';\nexport default function generateRangePicker(generateConfig) {\n  const RangePicker = /*#__PURE__*/forwardRef((props, ref) => {\n    var _a;\n    const {\n        prefixCls: customizePrefixCls,\n        getPopupContainer: customGetPopupContainer,\n        className,\n        style,\n        placement,\n        size: customizeSize,\n        disabled: customDisabled,\n        bordered = true,\n        placeholder,\n        popupClassName,\n        dropdownClassName,\n        status: customStatus,\n        clearIcon,\n        allowClear,\n        rootClassName\n      } = props,\n      restProps = __rest(props, [\"prefixCls\", \"getPopupContainer\", \"className\", \"style\", \"placement\", \"size\", \"disabled\", \"bordered\", \"placeholder\", \"popupClassName\", \"dropdownClassName\", \"status\", \"clearIcon\", \"allowClear\", \"rootClassName\"]);\n    const innerRef = React.useRef(null);\n    const {\n      getPrefixCls,\n      direction,\n      getPopupContainer,\n      rangePicker\n    } = useContext(ConfigContext);\n    const prefixCls = getPrefixCls('picker', customizePrefixCls);\n    const {\n      compactSize,\n      compactItemClassnames\n    } = useCompactItemContext(prefixCls, direction);\n    const {\n      format,\n      showTime,\n      picker\n    } = props;\n    const rootPrefixCls = getPrefixCls();\n    const cssVarCls = useCSSVarCls(prefixCls);\n    const [wrapCSSVar, hashId] = useStyle(prefixCls, cssVarCls);\n    const additionalOverrideProps = Object.assign(Object.assign({}, showTime ? getTimeProps(Object.assign({\n      format,\n      picker\n    }, showTime)) : {}), picker === 'time' ? getTimeProps(Object.assign(Object.assign({\n      format\n    }, props), {\n      picker\n    })) : {});\n    // =================== Warning =====================\n    if (process.env.NODE_ENV !== 'production') {\n      const warning = devUseWarning('DatePicker.RangePicker');\n      warning.deprecated(!dropdownClassName, 'dropdownClassName', 'popupClassName');\n    }\n    // ===================== Size =====================\n    const mergedSize = useSize(ctx => {\n      var _a;\n      return (_a = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a !== void 0 ? _a : ctx;\n    });\n    // ===================== Disabled =====================\n    const disabled = React.useContext(DisabledContext);\n    const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n    // ===================== FormItemInput =====================\n    const formItemContext = useContext(FormItemInputContext);\n    const {\n      hasFeedback,\n      status: contextStatus,\n      feedbackIcon\n    } = formItemContext;\n    const suffixNode = /*#__PURE__*/React.createElement(React.Fragment, null, picker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined, null) : /*#__PURE__*/React.createElement(CalendarOutlined, null), hasFeedback && feedbackIcon);\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        var _a;\n        return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: () => {\n        var _a;\n        return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    }));\n    const [contextLocale] = useLocale('Calendar', enUS);\n    const locale = Object.assign(Object.assign({}, contextLocale), props.locale);\n    // ============================ zIndex ============================\n    const [zIndex] = useZIndex('DatePicker', (_a = props.popupStyle) === null || _a === void 0 ? void 0 : _a.zIndex);\n    return wrapCSSVar( /*#__PURE__*/React.createElement(RCRangePicker, Object.assign({\n      separator: /*#__PURE__*/React.createElement(\"span\", {\n        \"aria-label\": \"to\",\n        className: `${prefixCls}-separator`\n      }, /*#__PURE__*/React.createElement(SwapRightOutlined, null)),\n      disabled: mergedDisabled,\n      ref: innerRef,\n      dropdownAlign: transPlacement2DropdownAlign(direction, placement),\n      placeholder: getRangePlaceholder(locale, picker, placeholder),\n      suffixIcon: suffixNode,\n      prevIcon: /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-prev-icon`\n      }),\n      nextIcon: /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-next-icon`\n      }),\n      superPrevIcon: /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-super-prev-icon`\n      }),\n      superNextIcon: /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-super-next-icon`\n      }),\n      transitionName: `${rootPrefixCls}-slide-up`\n    }, restProps, additionalOverrideProps, {\n      className: classNames({\n        [`${prefixCls}-${mergedSize}`]: mergedSize,\n        [`${prefixCls}-borderless`]: !bordered\n      }, getStatusClassNames(prefixCls, getMergedStatus(contextStatus, customStatus), hasFeedback), hashId, compactItemClassnames, className, rangePicker === null || rangePicker === void 0 ? void 0 : rangePicker.className, cssVarCls, rootClassName),\n      style: Object.assign(Object.assign({}, rangePicker === null || rangePicker === void 0 ? void 0 : rangePicker.style), style),\n      locale: locale.lang,\n      prefixCls: prefixCls,\n      getPopupContainer: customGetPopupContainer || getPopupContainer,\n      generateConfig: generateConfig,\n      components: Components,\n      direction: direction,\n      dropdownClassName: classNames(hashId, popupClassName || dropdownClassName, cssVarCls, rootClassName),\n      popupStyle: Object.assign(Object.assign({}, props.popupStyle), {\n        zIndex\n      }),\n      allowClear: mergeAllowClear(allowClear, clearIcon, /*#__PURE__*/React.createElement(CloseCircleFilled, null))\n    })));\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    RangePicker.displayName = 'RangePicker';\n  }\n  return RangePicker;\n}","map":null,"metadata":{},"sourceType":"module"}