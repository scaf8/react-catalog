{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useMemo } from 'react';\nimport RCTour from '@rc-component/tour';\nimport classNames from 'classnames';\nimport { useZIndex } from '../_util/hooks/useZIndex';\nimport getPlacements from '../_util/placements';\nimport zIndexContext from '../_util/zindexContext';\nimport { ConfigContext } from '../config-provider';\nimport { useToken } from '../theme/internal';\nimport TourPanel from './panelRender';\nimport PurePanel from './PurePanel';\nimport useStyle from './style';\nconst Tour = props => {\n  const {\n      prefixCls: customizePrefixCls,\n      type,\n      rootClassName,\n      indicatorsRender,\n      steps\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"type\", \"rootClassName\", \"indicatorsRender\", \"steps\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tour', customizePrefixCls);\n  const [wrapCSSVar, hashId] = useStyle(prefixCls);\n  const [, token] = useToken();\n  const mergedSteps = useMemo(() => steps === null || steps === void 0 ? void 0 : steps.map(step => {\n    var _a;\n    return Object.assign(Object.assign({}, step), {\n      className: classNames(step.className, {\n        [`${prefixCls}-primary`]: ((_a = step.type) !== null && _a !== void 0 ? _a : type) === 'primary'\n      })\n    });\n  }), [steps, type]);\n  const builtinPlacements = getPlacements({\n    arrowPointAtCenter: true,\n    autoAdjustOverflow: true,\n    offset: token.marginXXS,\n    arrowWidth: token.sizePopupArrow,\n    borderRadius: token.borderRadius\n  });\n  const customClassName = classNames({\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, hashId, rootClassName);\n  const mergedRenderPanel = (stepProps, stepCurrent) => ( /*#__PURE__*/React.createElement(TourPanel, {\n    type: type,\n    stepProps: stepProps,\n    current: stepCurrent,\n    indicatorsRender: indicatorsRender\n  }));\n  // ============================ zIndex ============================\n  const [zIndex, contextZIndex] = useZIndex('Tour', restProps.zIndex);\n  return wrapCSSVar( /*#__PURE__*/React.createElement(zIndexContext.Provider, {\n    value: contextZIndex\n  }, /*#__PURE__*/React.createElement(RCTour, Object.assign({}, restProps, {\n    zIndex: zIndex,\n    rootClassName: customClassName,\n    prefixCls: prefixCls,\n    animated: true,\n    renderPanel: mergedRenderPanel,\n    builtinPlacements: builtinPlacements,\n    steps: mergedSteps\n  }))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Tour.displayName = 'Tour';\n}\nTour._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default Tour;","map":null,"metadata":{},"sourceType":"module"}